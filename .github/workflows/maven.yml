# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI/CD with Maven

on:
  push:
    branches: 
      - "main"
  # pull_request:
  #   branches: 
  #     - "main"

jobs:
  build:

    runs-on: ubuntu-latest
    
    # # ------ CI -------
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file ./2201/spring-boot/basic-rest-api/pom.xml
    
    # # --------- Continuous Delivery -----------
    - name: Generate Imagename with Tag
      id: vars
      env:
        REPOSITORY_URL: dipanjalmaitra/basic-rest-api
        TAG_ID: ${{ github.sha }}
      run: echo "::set-output name=image_name::$REPOSITORY_URL:$TAG_ID"
    
    # - name: Check output
    #   run: echo ${{ steps.vars.outputs.image_name }}

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        file: ./2201/spring-boot/basic-rest-api/Dockerfile-multistage
        push: true
        tags: ${{ steps.vars.outputs.image_name }}
    
    # --------- Continuous Deployment -----------
    - name: Run container to EC2
      uses: appleboy/ssh-action@master
      env:
        CONTAINER_NAME: basic-rest-api
        IMAGE_NAME: ${{ steps.vars.outputs.image_name }}
        DB_URL: jdbc:mysql://172.18.0.2:3306/java-2201
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          docker stop ${{ env.CONTAINER_NAME }}
          docker container rm ${{ env.CONTAINER_NAME }}
          docker run -d --name ${{ env.CONTAINER_NAME }} --network common-net --publish 8080:8080 -e DB_URL=${{ env.DB_URL }} ${{ env.IMAGE_NAME }}